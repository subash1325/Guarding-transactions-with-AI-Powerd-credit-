import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Step 1: Load the dataset
# Sample dataset: 'creditcard.csv' - common dataset for fraud detection
# Dataset can be found here: https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud
df = pd.read_csv('creditcard.csv')

# Step 2: Basic exploration
print("Dataset Summary:")
print(df.info())
print(df['Class'].value_counts())  # 0 = Legit, 1 = Fraud

# Step 3: Prepare the data
X = df.drop(['Class', 'Time'], axis=1)  # Drop 'Time' and target
y = df['Class']

# Step 4: Split into training/testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Step 5: Train model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluation
print("Model Evaluation:")
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

# Optional: Predicting a new transaction
sample_transaction = X_test.iloc[0:1]
prediction = model.predict(sample_transaction)
print("Sample transaction prediction (1=Fraud, 0=Legit):", prediction[0])

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error

# Load and preprocess data
df = pd.read_csv('air_quality_data.csv')
df.dropna(inplace=True)

X = df.drop(columns=['AQI', 'Date'])  # Features
y = df['AQI']  # Target

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest
rf = RandomForestRegressor(n_estimators=100)
rf.fit(X_train, y_train)
rf_preds = rf.predict(X_test)

# XGBoost
xgb = XGBRegressor(n_estimators=100)
xgb.fit(X_train, y_train)
xgb_preds = xgb.predict(X_test)

# Evaluate
print("RF MSE:", mean_squared_error(y_test, rf_preds))
print("XGB MSE:", mean_squared_error(y_test, xgb_preds))
